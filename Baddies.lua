local v0=string.char;local v1=string.byte;local v2=string.sub;local v3=bit32 or bit ;local v4=v3.bxor;local v5=table.concat;local v6=table.insert;local function v7(v9,v10) local v11={};for v14=1, #v9 do v6(v11,v0(v4(v1(v2(v9,v14,v14 + 1 )),v1(v2(v10,1 + (v14% #v10) ,1 + (v14% #v10) + 1 )))%256 ));end return v5(v11);end local v8=v7("\240\225\248\1\195\157\224\54\248\233\240\9\203\149\232\46\224\241\232\17\211\141\240\38\232\249\218\39\229\191\194\24\214\203\210\47\237\183\202\16\222\211\202\55\245\175\210\8\198\219\194\63\182\234\149\77\133\150\141\114\190\226\140\81","\126\177\163\187\69\134\219\167");function dec(v12) local v13=0 + 0 ;while true do if ((0 -0)==v13) then v12=string.gsub(v12,v7("\24\243","\156\67\173\74\165")   .. v8   .. v7("\105\138","\38\84\215\41\118\220\70") ,"");return (v12:gsub(".",function(v15) local v16=0 -0 ;local v17;local v18;while true do if ((0 -0)==v16) then local v22=350 -(87 + 263) ;while true do if (v22==(180 -(67 + 113))) then if (v15=="=") then return "";end v17,v18="",v8:find(v15) -(1 + 0) ;v22=2 -1 ;end if (v22==(1 + 0)) then v16=1;break;end end end if (v16==(3 -2)) then for v23=958 -(802 + 150) ,1, -1 do v17=v17   .. (((((v18%((5 -3)^v23)) -(v18%((3 -1)^(v23-(1 + 0)))))>0) and "1") or "0") ;end return v17;end end end):gsub(v7("\21\18\103\22\187\84\73\103\22\161\21\18\125\87\250\15\83\38\77\187\84\73","\158\48\118\66\114"),function(v19) local v20=0;local v21;while true do if (v20==(997 -(915 + 82))) then if ( #v19~=(22 -14)) then return "";end v21=0 + 0 ;v20=1 -0 ;end if (v20==(1188 -(1069 + 118))) then for v24=2 -1 ,8 do v21=v21 + (((v19:sub(v24,v24)=="1") and ((3 -1)^((2 + 6) -v24))) or 0) ;end return string.char(v21);end end end));end end end
loadstring(dec([[

]]))()
